# Copyright (c) IncQuery Labs cPlc.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

name: IncQuery Validator for Enterprise Architect
description: This action downloads and installs the IncQuery Validator for Enterprise Architect, then runs a validation on the given model with the given ruleset.

inputs:
  model_file_path:
    description: "Path to the model file."
    required: true
  analysis_suite:
    description: "Name of the analysis suite (ruleset) to validate with."
    required: true
  incquery_username:
    description: "Username to https://artifacts.incquery.io/. Not required if the validator is already installed on the runner."
    required: false
  incquery_password:
    description: "Password to https://artifacts.incquery.io/. Not required if the validator is already installed on the runner."
    required: false
  license:
    description: "The contents of the supplied license file."
    required: true
  comment_on_pr:
    description: "Comment on the pull request with the result of the analysis."
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Download and install IncQuery Validator for Enterprise Architect
      shell: pwsh
      run: |
        if (Test-Path -Path 'C:/Program Files/IncQuery Labs/IncQuery Validator for Enterprise Architect/CI/run_validation.ps1' -PathType Leaf )
        {
          echo "IncQuery Validator for Enterprise Architect is already installed."
        }
        else
        {
          $setupWebUrl = "https://artifacts.incquery.io/incquery-suite/incquery-validator-for-ea/IncQuery%20Validator%20for%20Enterprise%20Architect%202023.1.2%20Setup.exe"
          $setupWebUrl = "https://build.incquerylabs.com/nexus/repository/lieberlieber-collaboration-raw/validator-for-ea/release-2023.2.0-alpha/IncQuery%20Validator%20for%20Enterprise%20Architect%202023.2.0-alpha%20Setup.exe"
          $user = "${{ inputs.incquery_username }}"
          $pass= "${{ inputs.incquery_password }}"
          if ( $user.Length -eq 0 ) { exit 1 }
          if ( $pass.Length -eq 0 ) { exit 1 }
          $secpasswd = ConvertTo-SecureString $pass -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential($user, $secpasswd)
          Invoke-WebRequest $setupWebUrl -Credential $credential -OutFile "${{ runner.temp }}/IncQuery Validator for Enterprise Architect Setup.exe"
          Start-Process -FilePath '${{ runner.temp }}/IncQuery Validator for Enterprise Architect Setup.exe' -ArgumentList @("/install", "/quiet") -Wait
        }
    - name: Create the license file
      shell: pwsh
      run: |
        echo '${{ inputs.license }}' | Out-File -FilePath '${{ runner.temp }}/IncQueryValidatorLicense.lic'

    - name: Run validation
      shell: pwsh
      run: |
        & 'C:\Program Files\IncQuery Labs\IncQuery Validator for Enterprise Architect\CI\run_validation.ps1' -model '${{ inputs.model_file_path }}' -licenseFile '${{ runner.temp }}/IncQueryValidatorLicense.lic' -outputPath '${{ runner.temp }}/validation_result' -analysisSuite '${{ inputs.analysis_suite }}'

    - name: "Archive analysis result"
      uses: actions/upload-artifact@v3
      with:
        name: "${{ inputs.analysis_suite }} analysis result"
        path: ${{ runner.temp }}/validation_result/

    - name: "Create PR comment content"
      shell: pwsh
      if: ${{ inputs.comment_on_pr == 'true' }}
      run: |  
        $result = Import-Csv -Path "${{ runner.temp }}/validation_result/kpi_summary.csv" -Header level,number 
        $msg = "## ![validator_icon](https://github.com/IncQueryLabs/incquery-suite-ea-connector/assets/39518109/7e00edf1-630d-47f8-b37e-cd8f5c0875f0) IncQuery Validator for Enterprise Architect `r`nAnalysis were executed on **${{ inputs.model_file_path }}** with **${{ inputs.analysis_suite }}**.`r`n`r`n"
        
        if (  $result.Count -gt 1 )
        {
          $fatals   = $result | where { $_.level.StartsWith("fatal error") }
          $errors   = $result | where { $_.level.StartsWith("errors")      }
          $warnings = $result | where { $_.level.StartsWith("warnings")    }
          $info     = $result | where { $_.level.StartsWith("info")        }
          $debug    = $result | where { $_.level.StartsWith("debug")       }
          
          $fatals   = if ($fatals)   { $fatals.number   } else { 0 }
          $errors   = if ($errors)   { $errors.number   } else { 0 }
          $warnings = if ($warnings) { $warnings.number } else { 0 }
          $info     = if ($info)     { $info.number     } else { 0 }
          $debug    = if ($debug)    { $debug.number    } else { 0 }
          
          if ( ($fatals -eq 0) -and ($errors -eq 0) -and ($warnings -eq 0) )
          {
            $msg += "No major issues found. :+1: `r`n"
          } 
          else
          {
            $msg += "The following number of issues were detected:`r`n"
          }
          
          if ( ($fatals + $errors + $warnings + $info + $debug) -gt 0 )
          {
            $msg += "| Level  | Occurrences |`r`n`| --- | ------------- | ------------- |`r`n"
            if ( $fatals   -ne 0 ) { $msg += "| :no_entry:           | Fatal   | $fatals   |`r`n" }
            if ( $errors   -ne 0 ) { $msg += "| :no_entry_sign:      | Error   | $errors   |`r`n" }
            if ( $warnings -ne 0 ) { $msg += "| :warning:            | Warning | $warnings |`r`n" }
            if ( $info     -ne 0 ) { $msg += "| :information_source: | Info    | $info     |`r`n" }
            if ( $debug    -ne 0 ) { $msg += "| :grey_question:      | Debug   | $debug    |`r`n" }
          }
        }
        else
        {
          $msg += "No issues found. :+1:`r`n"
        }
        
        $msg += "`r`nTo download the full report click [here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})."
        
        $msg | Out-File -FilePath '${{ runner.temp }}/pr_comment.txt'

    - name: "Comment on PR"
      if: ${{ inputs.comment_on_pr == 'true' }}
      continue-on-error: true
      uses: thollander/actions-comment-pull-request@v2
      with:
        filePath: '${{ runner.temp }}/pr_comment.txt'

branding:
  icon: 'box'
  color: 'blue'
