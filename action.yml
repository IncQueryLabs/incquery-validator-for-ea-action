# Copyright (c) IncQuery Labs cPlc.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

name: IncQuery Validator for Enterprise Architect
description: This action downloads and installs the IncQuery Validator for Enterprise Architect, then runs a validation on the given model with the given ruleset.

inputs:
  model_file_path:
    description: "Path to the model file."
    required: true
  analysis_suite:
    description: "Name of the analysis suite (ruleset) to validate with."
    required: true
  incquery_username:
    description: "Username to https://artifacts.incquery.io/. Not required if the validator is already installed on the runner."
    required: false
  incquery_password:
    description: "Password to https://artifacts.incquery.io/. Not required if the validator is already installed on the runner."
    required: false
  license:
    description: "The contents of the supplied license file."
    required: true
  comment_on_pr:
    description: "Comment on the pull request with the result of the analysis."
    required: false
    default: 'false'
  fail_on:
    description: "Fail the workflow if there are any findings with the level equal or greater to the specified. Possible values are: 'none' (don't fail on anything), 'debug', 'info', 'warning', 'error', 'fatal'."
    required: false
    default: 'warning'

runs:
  using: "composite"
  steps:
    - name: Determining if IncQuery Validator for Enterprise Architect needs to be installed or not
      id: validator-state
      shell: pwsh
      run: |
        if (Test-Path -Path 'C:/Program Files/IncQuery Labs/IncQuery Validator for Enterprise Architect/CI/run_validation.ps1' -PathType Leaf )
        {
          echo "IncQuery Validator for Enterprise Architect is already installed."
          echo "need_to_install=false" >> $env:GITHUB_OUTPUT
        }
        else
        {
          echo "IncQuery Validator for Enterprise Architect will be installed."
          echo "need_to_install=true" >> $env:GITHUB_OUTPUT
          echo "download_url=https://build.incquerylabs.com/nexus/repository/lieberlieber-collaboration-raw/validator-for-ea/release-2023.2.0-alpha/IncQuery%20Validator%20for%20Enterprise%20Architect%202023.2.0-alpha%20Setup.exe" >> $env:GITHUB_OUTPUT
          echo "installer_path=${{ runner.temp }}/IncQuery Validator for Enterprise Architect Setup.exe" >> $env:GITHUB_OUTPUT
        }

    - name: Cache the IncQuery Validator for Enterprise Architect installer
      id: cache-installer
      uses: actions/cache@v3
      if: ${{ steps.validator-state.outputs.need_to_install == 'true' }}
      with:
        path: ${{ steps.validator-state.outputs.installer_path }}
        key:  ${{ steps.validator-state.outputs.download_url }}

    - name: Download the IncQuery Validator for Enterprise Architect installer
      shell: pwsh
      if: ${{ ( steps.cache-installer.outputs.cache-hit != 'true' ) && ( steps.validator-state.outputs.need_to_install == 'true' ) }}
      run: |
        $user = "${{ inputs.incquery_username }}"
        $pass= "${{ inputs.incquery_password }}"
        if ( $user.Length -eq 0 ) { exit 1 }
        if ( $pass.Length -eq 0 ) { exit 1 }
        $secpasswd = ConvertTo-SecureString $pass -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential($user, $secpasswd)
        Invoke-WebRequest ${{ steps.validator-state.outputs.download_url }} -Credential $credential -OutFile '${{ steps.validator-state.outputs.installer_path }}'
    
    - name: Install IncQuery Validator for Enterprise Architect
      shell: pwsh
      if: ${{ steps.validator-state.outputs.need_to_install == 'true' }}
      run: |
        Start-Process -FilePath '${{ steps.validator-state.outputs.installer_path }}' -ArgumentList @("/install", "/quiet") -Wait

    - name: Create the license file
      shell: pwsh
      run: |
        echo '${{ inputs.license }}' | Out-File -FilePath '${{ runner.temp }}/IncQueryValidatorLicense.lic'

    - name: Run validation
      shell: pwsh
      run: |
        & 'C:\Program Files\IncQuery Labs\IncQuery Validator for Enterprise Architect\CI\run_validation.ps1' -model '${{ inputs.model_file_path }}' -licenseFile '${{ runner.temp }}/IncQueryValidatorLicense.lic' -outputPath '${{ runner.temp }}/validation_result' -analysisSuite '${{ inputs.analysis_suite }}'

    - name: "Archive analysis result"
      uses: actions/upload-artifact@v3
      with:
        name: "${{ inputs.analysis_suite }} analysis result"
        path: ${{ runner.temp }}/validation_result/

    - name: "Process result summary, create PR comment content"
      shell: pwsh
      id: process_summary
      run: |  
        $result = Import-Csv -Path "${{ runner.temp }}/validation_result/kpi_summary.csv" -Header level,number 
        $msg = "# ![validator_icon](https://github.com/IncQueryLabs/incquery-validator-for-ea-action/assets/39518109/7db6c023-9bae-4e68-ad43-ca92ba84d0e6) IncQuery Validator for Enterprise Architect `r`nAnalysis were executed on **${{ inputs.model_file_path }}** with the **${{ inputs.analysis_suite }}** ruleset.`r`n`r`n"
        
        $fatals   = $result | where { $_.level.StartsWith("fatal error") }
        $errors   = $result | where { $_.level.StartsWith("errors")      }
        $warnings = $result | where { $_.level.StartsWith("warnings")    }
        $infos    = $result | where { $_.level.StartsWith("info")        }
        $debugs   = $result | where { $_.level.StartsWith("debug")       }
        
        $fatals   = if ($fatals)   { [int]$fatals.number   } else { [int]0 }
        $errors   = if ($errors)   { [int]$errors.number   } else { [int]0 }
        $warnings = if ($warnings) { [int]$warnings.number } else { [int]0 }
        $infos    = if ($infos)    { [int]$infos.number    } else { [int]0 }
        $debugs   = if ($debugs)   { [int]$debugs.number   } else { [int]0 }

        $sumMinFatals    = $fatals
        $sumMinErrors    = $sumMinFatals   + $errors
        $sumMinWarnings  = $sumMinErrors   + $warnings
        $sumMinInfos     = $sumMinWarnings + $infos
        $sumMinDebugs    = $sumMinInfos    + $debugs

        if ( $sumMinDebugs -gt 0 )
        {
          $msg += "The following type of issues were detected:`r`n"
          
          if ( $sumMinDebugs -gt 0 )
          {
            $msg += "|     | Level         | Occurrences   |`r`n"
            $msg += "| --- | ------------- | ------------- |`r`n"
            if ( $fatals   -ne 0 ) { $msg += "| :no_entry:           | Fatal   | $fatals   |`r`n" }
            if ( $errors   -ne 0 ) { $msg += "| :no_entry_sign:      | Error   | $errors   |`r`n" }
            if ( $warnings -ne 0 ) { $msg += "| :warning:            | Warning | $warnings |`r`n" }
            if ( $infos    -ne 0 ) { $msg += "| :information_source: | Info    | $infos    |`r`n" }
            if ( $debugs   -ne 0 ) { $msg += "| :grey_question:      | Debug   | $debugs   |`r`n" }
          }
        }
        else
        {
          $msg += "No issues found. :+1:`r`n"
        }

        $needToFail = "false"

        $checkMsg = ":heavy_check_mark: The model passed the validation criteria."

        if ( ("${{ inputs.fail_on }}" -eq "fatal") -and ($sumMinFatals -gt 0) )
        {
          echo "Failing build, because there are fatal errors in the model."
          $needToFail = "true"
          $checkMsg = ":x: The model failed the validation criteria, there should be no fatal errors."
        }
        
        if ( ("${{ inputs.fail_on }}" -eq "error") -and ($sumMinErrors -gt 0) )
        {
          echo "Failing build, because there are errors or fatal errors in the model."
          $needToFail = "true"
          $checkMsg = ":x: The model failed the validation criteria, there should be no errors or fatal errors."
        }

        if ( ("${{ inputs.fail_on }}" -eq "warning") -and ($sumMinWarnings -gt 0) )
        {
          echo "Failing build, because there are warnings or above in the model."
          $needToFail = "true"
          $checkMsg = ":x: The model failed the validation criteria, there should be no warnings, errors or fatal errors."
        }

        if ( ("${{ inputs.fail_on }}" -eq "info") -and ($sumMinInfos -gt 0) )
        {
          echo "Failing build, because there are infos or above in the model."
          $needToFail = "true"
          $checkMsg = ":x: The model failed the validation criteria, there should be no infos, warnings, errors or fatal errors."
        }

        if ( ("${{ inputs.fail_on }}" -eq "debug") -and ($sumMinDebugs -gt 0) )
        {
          echo "Failing build, because there are debug findings or above in the model."
          $needToFail = "true"
          $checkMsg = ":x: The model failed the validation criteria, there should be no issues detected."
        }
        
        echo "need_to_fail=$needToFail" >> $env:GITHUB_OUTPUT

        $msg += "`r`n" + $checkMsg + "`r`n"
        $msg += "`r`nTo view the full report download the *${{ inputs.analysis_suite }} analysis result* artifacts from [here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)."
        
        $msg | Out-File -FilePath '${{ runner.temp }}/pr_comment.txt'
        echo $msg

        # create the run summary message

        $summary_csv = Import-Csv -Path "${{ runner.temp }}/validation_result/summary.csv"

        $summary_message = "`r`n`r`n## Per rule breakdown`r`n"

        if ( "${{ inputs.fail_on }}" -eq "none" )
        {
            $summary_message += "| Severity | Rule name | Occurrences | Description |`r`n"
            $summary_message += "| -------- | --------- | ----------- | ----------- |`r`n"
        }
        else 
        {
            $summary_message += "|     | Severity | Rule name | Occurrences | Description |`r`n"
            $summary_message += "| --- | -------- | --------- | ----------- | ----------- |`r`n"
        }

        foreach ($rule in $summary_csv)
        {
            $severity = $rule.Severity
            $occurrences = $rule.Occurrences
            $description = $rule.Description
            $ruleName = $rule.'Symbolic name'
            
            switch ($severity) {
                "FATAL"   { $severityNumeric = 5 }
                "ERROR"   { $severityNumeric = 4 }
                "WARNING" { $severityNumeric = 3 }
                "INFO"    { $severityNumeric = 2 }
                "DEBUG"   { $severityNumeric = 1 }
                Default   { $severityNumeric = 0 }
            }

            $marker = ":green_circle:"

            if ( ( $occurrences -gt 0 ) -and
                ( ( ("${{ inputs.fail_on }}" -eq "fatal"  ) -and ($severityNumeric -ge 5 ) ) -or
                  ( ("${{ inputs.fail_on }}" -eq "error"  ) -and ($severityNumeric -ge 4 ) ) -or
                  ( ("${{ inputs.fail_on }}" -eq "warning") -and ($severityNumeric -ge 3 ) ) -or
                  ( ("${{ inputs.fail_on }}" -eq "info"   ) -and ($severityNumeric -ge 2 ) ) -or
                  ( ("${{ inputs.fail_on }}" -eq "debug"  ) -and ($severityNumeric -ge 1 ) ) ) )
            {
              $marker = ":red_circle:"
            }

            $summary_message += "| "
            
            if ( "${{ inputs.fail_on }}" -ne "none" )
            {
                $summary_message += " $marker |"
            }

            $summary_message += " $severity | $ruleName | $occurrences | $description |`r`n"
        }

        $summary_message += "`r`n"

        if ( "${{ inputs.fail_on }}" -ne "none" )
        {
            $summary_message += ">The pass/fail display (:green_circle:/:red_circle:) depends on the configured quality gate (currently its set to fail on ${{ inputs.fail_on }} or more severe).`r`n"
        }

        # write out the summary message
        echo $msg             | Out-File -FilePath $env:GITHUB_STEP_SUMMARY
        echo $summary_message | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append

    - name: Find Pull Request
      if: ${{ inputs.comment_on_pr == 'true' }}
      uses: juliangruber/find-pull-request-action@v1
      id: find-pull-request
      with:
        branch: ${{ github.head_ref || github.ref_name }}

    - name: Comment on PR
      if: ${{ (inputs.comment_on_pr == 'true') && (steps.find-pull-request.outputs.number > 0) }}
      continue-on-error: true
      uses: thollander/actions-comment-pull-request@v2
      with:
        filePath: '${{ runner.temp }}/pr_comment.txt'
        pr_number: '${{ steps.find-pull-request.outputs.number }}'

    - name: Check build result
      if: ${{ steps.process_summary.outputs.need_to_fail == 'true' }}
      shell: pwsh
      run: |
        echo "Failing build, because there are issues detected above the set threshold."
        exit 1

branding:
  icon: 'box'
  color: 'blue'
